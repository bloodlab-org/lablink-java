/*
 * Lablink
 * Lablink Swagger documentation
 *
 * The version of the OpenAPI document: 3.0
 * Contact: laborit@blutspende.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.blutspende.lablink.api;

import org.blutspende.lablink.ApiException;
import org.blutspende.lablink.model.ApiError;
import org.blutspende.lablink.model.GetOrderStatesV3200Response;
import org.blutspende.lablink.model.GetOrdersV3200Response;
import org.blutspende.lablink.model.Order;
import org.blutspende.lablink.model.OrderMetadata;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrderApi
 */
@Disabled
public class OrderApiTest {

    private final OrderApi api = new OrderApi();

    /**
     * Create order(s)
     *
     * Creates order(s).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrdersV3Test() throws ApiException {
        List<Order> request = null;
        String xApiVersion = null;
        List<OrderMetadata> response = api.createOrdersV3(request, xApiVersion);
        // TODO: test validations
    }

    /**
     * Delete order
     *
     * Deletes an order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrderV3Test() throws ApiException {
        UUID id = null;
        String xApiVersion = null;
        api.deleteOrderV3(id, xApiVersion);
        // TODO: test validations
    }

    /**
     * Delete orders
     *
     * Deletes all order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrdersV3Test() throws ApiException {
        List<String> request = null;
        String xApiVersion = null;
        List<String> response = api.deleteOrdersV3(request, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get order state
     *
     * Gets an order&#39;s state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrderStateV3Test() throws ApiException {
        UUID id = null;
        String xApiVersion = null;
        GetOrderStatesV3200Response response = api.getOrderStateV3(id, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get order states
     *
     * Gets the state of all orders.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrderStatesV3Test() throws ApiException {
        Integer page = null;
        Integer pageSize = null;
        String xApiVersion = null;
        List<String> sort = null;
        String createdFrom = null;
        String createdTo = null;
        String searchContent = null;
        String state = null;
        String type = null;
        GetOrderStatesV3200Response response = api.getOrderStatesV3(page, pageSize, xApiVersion, sort, createdFrom, createdTo, searchContent, state, type);
        // TODO: test validations
    }

    /**
     * Get order
     *
     * Gets an order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrderV3Test() throws ApiException {
        UUID id = null;
        String xApiVersion = null;
        Order response = api.getOrderV3(id, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get orders
     *
     * Gets all order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrdersV3Test() throws ApiException {
        Integer page = null;
        Integer pageSize = null;
        String xApiVersion = null;
        List<String> sort = null;
        String createdFrom = null;
        String createdTo = null;
        String locationId = null;
        String searchContent = null;
        String state = null;
        String type = null;
        GetOrdersV3200Response response = api.getOrdersV3(page, pageSize, xApiVersion, sort, createdFrom, createdTo, locationId, searchContent, state, type);
        // TODO: test validations
    }

    /**
     * Get selected order states
     *
     * Gets order states based on the specified selection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelectionOrdersStatesV3Test() throws ApiException {
        UUID id = null;
        Integer page = null;
        Integer pageSize = null;
        String xApiVersion = null;
        List<String> sort = null;
        GetOrderStatesV3200Response response = api.getSelectionOrdersStatesV3(id, page, pageSize, xApiVersion, sort);
        // TODO: test validations
    }

    /**
     * Get selected orders
     *
     * Gets Orders based on the specified selection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelectionOrdersV3Test() throws ApiException {
        UUID id = null;
        Integer page = null;
        Integer pageSize = null;
        String xApiVersion = null;
        List<String> sort = null;
        GetOrdersV3200Response response = api.getSelectionOrdersV3(id, page, pageSize, xApiVersion, sort);
        // TODO: test validations
    }

}
