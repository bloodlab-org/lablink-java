/*
 * Lablink
 * Lablink Swagger documentation
 *
 * The version of the OpenAPI document: 3.0
 * Contact: laborit@blutspende.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.blutspende.lablink.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.blutspende.lablink.model.OrderResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.blutspende.lablink.JSON;

/**
 * OrderExamination
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-12T06:34:53.661463+01:00[Europe/Berlin]")
public class OrderExamination {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  public static final String SERIALIZED_NAME_RESULTS = "results";
  @SerializedName(SERIALIZED_NAME_RESULTS)
  private List<OrderResult> results;

  public static final String SERIALIZED_NAME_SAMPLE_CODES = "sampleCodes";
  @SerializedName(SERIALIZED_NAME_SAMPLE_CODES)
  private List<String> sampleCodes;

  public static final String SERIALIZED_NAME_SAMPLE_DATE = "sampleDate";
  @SerializedName(SERIALIZED_NAME_SAMPLE_DATE)
  private LocalDate sampleDate;

  public static final String SERIALIZED_NAME_SAMPLE_TIME = "sampleTime";
  @SerializedName(SERIALIZED_NAME_SAMPLE_TIME)
  private String sampleTime;

  public OrderExamination() {
  }

  public OrderExamination id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Reference to BloodLab Examination. On API called as ID.
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public OrderExamination reference(String reference) {
    
    this.reference = reference;
    return this;
  }

   /**
   * The external unique identifier of the order
   * @return reference
  **/
  @javax.annotation.Nullable
  public String getReference() {
    return reference;
  }


  public void setReference(String reference) {
    this.reference = reference;
  }


  public OrderExamination results(List<OrderResult> results) {
    
    this.results = results;
    return this;
  }

  public OrderExamination addResultsItem(OrderResult resultsItem) {
    if (this.results == null) {
      this.results = new ArrayList<>();
    }
    this.results.add(resultsItem);
    return this;
  }

   /**
   * The results belonging to the order
   * @return results
  **/
  @javax.annotation.Nullable
  public List<OrderResult> getResults() {
    return results;
  }


  public void setResults(List<OrderResult> results) {
    this.results = results;
  }


  public OrderExamination sampleCodes(List<String> sampleCodes) {
    
    this.sampleCodes = sampleCodes;
    return this;
  }

  public OrderExamination addSampleCodesItem(String sampleCodesItem) {
    if (this.sampleCodes == null) {
      this.sampleCodes = new ArrayList<>();
    }
    this.sampleCodes.add(sampleCodesItem);
    return this;
  }

   /**
   * The sample codes
   * @return sampleCodes
  **/
  @javax.annotation.Nullable
  public List<String> getSampleCodes() {
    return sampleCodes;
  }


  public void setSampleCodes(List<String> sampleCodes) {
    this.sampleCodes = sampleCodes;
  }


  public OrderExamination sampleDate(LocalDate sampleDate) {
    
    this.sampleDate = sampleDate;
    return this;
  }

   /**
   * The sample date
   * @return sampleDate
  **/
  @javax.annotation.Nullable
  public LocalDate getSampleDate() {
    return sampleDate;
  }


  public void setSampleDate(LocalDate sampleDate) {
    this.sampleDate = sampleDate;
  }


  public OrderExamination sampleTime(String sampleTime) {
    
    this.sampleTime = sampleTime;
    return this;
  }

   /**
   * The sample time
   * @return sampleTime
  **/
  @javax.annotation.Nullable
  public String getSampleTime() {
    return sampleTime;
  }


  public void setSampleTime(String sampleTime) {
    this.sampleTime = sampleTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderExamination orderExamination = (OrderExamination) o;
    return Objects.equals(this.id, orderExamination.id) &&
        Objects.equals(this.reference, orderExamination.reference) &&
        Objects.equals(this.results, orderExamination.results) &&
        Objects.equals(this.sampleCodes, orderExamination.sampleCodes) &&
        Objects.equals(this.sampleDate, orderExamination.sampleDate) &&
        Objects.equals(this.sampleTime, orderExamination.sampleTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, reference, results, sampleCodes, sampleDate, sampleTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderExamination {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    results: ").append(toIndentedString(results)).append("\n");
    sb.append("    sampleCodes: ").append(toIndentedString(sampleCodes)).append("\n");
    sb.append("    sampleDate: ").append(toIndentedString(sampleDate)).append("\n");
    sb.append("    sampleTime: ").append(toIndentedString(sampleTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("reference");
    openapiFields.add("results");
    openapiFields.add("sampleCodes");
    openapiFields.add("sampleDate");
    openapiFields.add("sampleTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to OrderExamination
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderExamination.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderExamination is not found in the empty JSON string", OrderExamination.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderExamination.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderExamination` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrderExamination.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("reference") != null && !jsonObj.get("reference").isJsonNull()) && !jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
      if (jsonObj.get("results") != null && !jsonObj.get("results").isJsonNull()) {
        JsonArray jsonArrayresults = jsonObj.getAsJsonArray("results");
        if (jsonArrayresults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("results").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `results` to be an array in the JSON string but got `%s`", jsonObj.get("results").toString()));
          }

          // validate the optional field `results` (array)
          for (int i = 0; i < jsonArrayresults.size(); i++) {
            OrderResult.validateJsonElement(jsonArrayresults.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sampleCodes") != null && !jsonObj.get("sampleCodes").isJsonNull() && !jsonObj.get("sampleCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sampleCodes` to be an array in the JSON string but got `%s`", jsonObj.get("sampleCodes").toString()));
      }
      if ((jsonObj.get("sampleTime") != null && !jsonObj.get("sampleTime").isJsonNull()) && !jsonObj.get("sampleTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sampleTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sampleTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderExamination.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderExamination' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderExamination> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderExamination.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderExamination>() {
           @Override
           public void write(JsonWriter out, OrderExamination value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderExamination read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderExamination given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderExamination
  * @throws IOException if the JSON string is invalid with respect to OrderExamination
  */
  public static OrderExamination fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderExamination.class);
  }

 /**
  * Convert an instance of OrderExamination to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

