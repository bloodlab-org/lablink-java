/*
 * Lablink
 * Lablink Swagger documentation
 *
 * The version of the OpenAPI document: 3.0
 * Contact: laborit@blutspende.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.blutspende.lablink.api;

import org.blutspende.lablink.ApiCallback;
import org.blutspende.lablink.ApiClient;
import org.blutspende.lablink.ApiException;
import org.blutspende.lablink.ApiResponse;
import org.blutspende.lablink.Configuration;
import org.blutspende.lablink.Pair;
import org.blutspende.lablink.ProgressRequestBody;
import org.blutspende.lablink.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.blutspende.lablink.model.ApiError;
import org.blutspende.lablink.model.GetExaminationsV3200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExaminationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExaminationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExaminationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getExaminationsV3
     * @param page The desired page number (required)
     * @param pageSize The desired number of items per page (required)
     * @param xApiVersion The API version (optional, default to 3.0)
     * @param sort The sorting parameters in the format of \&quot;fieldName,asc/desc\&quot;. E.g. type,desc (optional)
     * @param code The code filter (optional)
     * @param name The name filter (optional)
     * @param unit The unit filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExaminationsV3Call(Integer page, Integer pageSize, String xApiVersion, List<String> sort, String code, String name, String unit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/examinations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sort", sort));
        }

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (unit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unit", unit));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExaminationsV3ValidateBeforeCall(Integer page, Integer pageSize, String xApiVersion, List<String> sort, String code, String name, String unit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling getExaminationsV3(Async)");
        }

        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling getExaminationsV3(Async)");
        }

        return getExaminationsV3Call(page, pageSize, xApiVersion, sort, code, name, unit, _callback);

    }

    /**
     * Get examinations
     * Gets all examination.
     * @param page The desired page number (required)
     * @param pageSize The desired number of items per page (required)
     * @param xApiVersion The API version (optional, default to 3.0)
     * @param sort The sorting parameters in the format of \&quot;fieldName,asc/desc\&quot;. E.g. type,desc (optional)
     * @param code The code filter (optional)
     * @param name The name filter (optional)
     * @param unit The unit filter (optional)
     * @return GetExaminationsV3200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public GetExaminationsV3200Response getExaminationsV3(Integer page, Integer pageSize, String xApiVersion, List<String> sort, String code, String name, String unit) throws ApiException {
        ApiResponse<GetExaminationsV3200Response> localVarResp = getExaminationsV3WithHttpInfo(page, pageSize, xApiVersion, sort, code, name, unit);
        return localVarResp.getData();
    }

    /**
     * Get examinations
     * Gets all examination.
     * @param page The desired page number (required)
     * @param pageSize The desired number of items per page (required)
     * @param xApiVersion The API version (optional, default to 3.0)
     * @param sort The sorting parameters in the format of \&quot;fieldName,asc/desc\&quot;. E.g. type,desc (optional)
     * @param code The code filter (optional)
     * @param name The name filter (optional)
     * @param unit The unit filter (optional)
     * @return ApiResponse&lt;GetExaminationsV3200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetExaminationsV3200Response> getExaminationsV3WithHttpInfo(Integer page, Integer pageSize, String xApiVersion, List<String> sort, String code, String name, String unit) throws ApiException {
        okhttp3.Call localVarCall = getExaminationsV3ValidateBeforeCall(page, pageSize, xApiVersion, sort, code, name, unit, null);
        Type localVarReturnType = new TypeToken<GetExaminationsV3200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get examinations (asynchronously)
     * Gets all examination.
     * @param page The desired page number (required)
     * @param pageSize The desired number of items per page (required)
     * @param xApiVersion The API version (optional, default to 3.0)
     * @param sort The sorting parameters in the format of \&quot;fieldName,asc/desc\&quot;. E.g. type,desc (optional)
     * @param code The code filter (optional)
     * @param name The name filter (optional)
     * @param unit The unit filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExaminationsV3Async(Integer page, Integer pageSize, String xApiVersion, List<String> sort, String code, String name, String unit, final ApiCallback<GetExaminationsV3200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExaminationsV3ValidateBeforeCall(page, pageSize, xApiVersion, sort, code, name, unit, _callback);
        Type localVarReturnType = new TypeToken<GetExaminationsV3200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
